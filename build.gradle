plugins {
    id 'java'
    id 'org.openapi.generator' version '7.16.0'
    id 'com.diffplug.spotless' version '8.0.0'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'org.cyclonedx.bom' version '2.4.1'
    id 'pmd'
}

group = 'uk.gov.hmcts.cp'
version = System.getProperty('API_SPEC_VERSION') ?: '0.0.999'

def githubActor = project.findProperty("github.actor") ?: System.getenv("GITHUB_ACTOR")
def githubToken = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
def githubRepo  = System.getenv("GITHUB_REPOSITORY")

def azureADOArtifactRepository = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
def azureADOArtifactActor = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
def azureADOArtifactToken = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = azureADOArtifactRepository }
}

sourceSets {
    main {
        java.srcDir("$buildDir/generated/src/main/java")
    }
}

tasks.withType(JavaCompile).configureEach {
    // keep builds strict, but don’t fail on generated code formatting issues (Spotless handles that)
    options.compilerArgs = ["-Xlint:unchecked", "-Werror"]
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging { exceptionFormat = 'full' }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'API_SPEC_VERSION', System.getProperty('API_SPEC_VERSION', '0.0.0')
    failFast = true
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

tasks.named('check') { dependsOn tasks.named('jacocoTestReport') }

// Dependency update policy: prefer stable unless current is stable
tasks.named("dependencyUpdates").configure {
    def isNonStable = { String v ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { v.toUpperCase().contains(it) }
        def regex = /^[0-9,.v-]+$/
        !stableKeyword && !(v ==~ regex)
    }
    rejectVersionIf { isNonStable(it.candidate.version) && !isNonStable(it.currentVersion) }
}

// ---- Publishing (GitHub Packages + Azure Artifacts) ----
publishing {
    publications {
        mavenJava(MavenPublication) { from components.java }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/$githubRepo")
            credentials {
                username = githubActor
                password = githubToken
            }
        }
        maven {
            name = "AzureArtifacts"
            url = uri(azureADOArtifactRepository)
            credentials {
                username = azureADOArtifactActor
                password = azureADOArtifactToken
            }
        }
    }
}

// ---- CycloneDX SBOM ----
cyclonedxBom {
    projectType = "library"
    includeConfigs = ["runtimeClasspath"]
    skipConfigs = ["test", "testImplementation"]
    schemaVersion = "1.6"
    componentVersion = providers.provider { project.version.toString() }
    destination = file("${layout.buildDirectory.get().asFile.absolutePath}/reports")
    includeBuildSystem = true
    outputName = "bom"
    outputFormat = "json"
}

// Package CHANGELOG + SBOM in the JAR
jar {
    dependsOn tasks.named('cyclonedxBom')

    if (file("CHANGELOG.md").exists()) {
        println "✅ Including CHANGELOG.md in JAR"
        from('CHANGELOG.md') { into 'META-INF' }
    } else {
        println "⚠️  CHANGELOG.md not found, skipping inclusion in JAR"
    }

    def sbomFile = file("${layout.buildDirectory.get().asFile.absolutePath}/reports/bom.json")
    if (sbomFile.exists()) {
        println "✅ Including SBOM from ${sbomFile} in JAR"
        from(sbomFile) {
            into 'META-INF/sbom'
            rename { 'bom.json' }
        }
    } else {
        println "⚠️  SBOM (bom.json) not found, skipping inclusion in JAR"
    }
}

// ---- OpenAPI generation ----
def inputSpecFile = fileTree("src/main/resources/openapi").matching {
    include("*.openapi.yml")
}.singleFile

tasks.named("openApiGenerate") {
    inputs.file(inputSpecFile)
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = inputSpecFile.absolutePath
    outputDir = "${layout.buildDirectory.get().asFile.absolutePath}/generated"
    apiPackage = "uk.gov.hmcts.cp.openapi.api"
    modelPackage = "uk.gov.hmcts.cp.openapi.model"
    generateModelTests = true
    generateApiTests = true
    cleanupOutput = true
    // IMPORTANT: do NOT add Lombok constructors to generated models
    configOptions = [
            validateSpec            : "true",
            dateLibrary             : "java8",
            interfaceOnly           : "true",
            hideGenerationTimestamp : "true",
            useJakartaEe            : "true",
            useBeanValidation       : "true",
            useTags                 : "true",
            useSpringBoot3          : "true",
            implicitHeaders         : "false",
            performBeanValidation   : "true",
            serializableModel       : "true",
            openApiNullable         : "false",
            useLombok               : "false"   // <- avoids duplicate ctor clash
            // additionalModelTypeAnnotations intentionally omitted
    ]
}

tasks.named('compileJava') {
    dependsOn tasks.named('spotlessApply'), tasks.named('openApiGenerate')
}

// ---- Spotless (format generated sources) ----
def formatterUrl  = 'https://raw.githubusercontent.com/hmcts/api-cp-code-style/refs/heads/main/config/formatter/eclipse-formatter.xml'
def formatterPath = "${layout.buildDirectory.get().asFile.absolutePath}/eclipse-formatter.xml"

tasks.register('downloadFormatter') {
    outputs.file(formatterPath)
    doLast {
        def f = new File(formatterPath)
        f.parentFile.mkdirs()
        f.text = new URI(formatterUrl).toURL().text
    }
}

spotless {
    java {
        target 'build/generated/src/main/**/*.java'
        removeUnusedImports()
        eclipse().configFile(formatterPath)
    }
}

tasks.named('spotlessApply') {
    dependsOn tasks.named('openApiGenerate'), tasks.named('downloadFormatter')
}
tasks.named('spotlessJava') {
    dependsOn tasks.named('openApiGenerate'), tasks.named('downloadFormatter')
}

// ---- Static analysis ----
pmd {
    ruleSets = []
    ruleSetFiles = files(".github/pmd-ruleset.xml")
    ignoreFailures = false
}
tasks.withType(Pmd) {
    // exclude generated sources
    def genDir = file("${layout.buildDirectory.get().asFile.absolutePath}/generated/src/main/java").canonicalPath
    source = source.filter { !it.canonicalPath.startsWith(genDir) }
    reports { xml.required.set(true); html.required.set(true) }
}
tasks.named("pmdMain").configure { onlyIf { gradle.startParameter.taskNames.contains(name) } }
tasks.named("pmdTest").configure { enabled = false }

// ---- Versions / libs ----
ext {
    // NOTE: prefer a stable Spring Boot 3.3.x+ for Java 21; adjust as needed.
    springBootVersion = "4.0.0-M3"
    lombokVersion     = "1.18.42"
}

dependencies {
    // Keep generator libs OUT of your runtime JAR (plugin handles them). No need for:
    // implementation 'org.openapitools:openapi-generator-core:...'
    // implementation 'io.swagger.parser.v3:swagger-parser:...'

    // Generated interfaces will use Spring + Bean Validation annotations
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"
    implementation "io.swagger.parser.v3:swagger-parser:2.1.34"
    implementation "io.swagger.core.v3:swagger-models:2.2.38"
    // Swagger annotations (compileOnly so you don't leak them transitively)
    compileOnly 'io.swagger.core.v3:swagger-annotations:2.2.38'

    // Logging util
    implementation 'net.logstash.logback:logstash-logback-encoder:8.1'

    // Jackson annotations (used by generated models)
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.20'

    // Lombok for YOUR handwritten code (not for generated models)
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Testing
    testImplementation platform('org.junit:junit-bom:6.0.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
